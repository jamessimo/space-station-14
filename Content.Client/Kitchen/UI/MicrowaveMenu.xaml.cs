using System;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;

using Robust.Client.UserInterface.XAML;
using Robust.Shared.Localization;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;


namespace Content.Client.Kitchen.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class MicrowaveMenu : FancyWindow
    {
        public sealed class MicrowaveCookTimeButton : Button
        {
            public uint CookTime;
        }

        public event Action<BaseButton.ButtonEventArgs, int>? OnCookTimeSelected;

        private ButtonGroup CookTimeButtonGroup { get; }

        public MicrowaveMenu(MicrowaveBoundUserInterface owner)
        {
            RobustXamlLoader.Load(this);

            CookTimeButtonGroup = new ButtonGroup();

            var instButton = new MicrowaveCookTimeButton
            {
                Text = Loc.GetString("microwave-menu-instant-button"),
                CookTime = 0,
                TextAlign = Label.AlignMode.Center,
                ToggleMode = true,
                HorizontalExpand = true,
                Group = CookTimeButtonGroup
            };
            instButton.StyleClasses.Add("OpenLeft");

            TimeArea.AddChild(instButton);


            for (var i = 5; i <= 30; i += 5)
            {
                var newButton = new MicrowaveCookTimeButton
                {
                    Text = i.ToString(),
                    CookTime = (uint) i,
                    TextAlign = Label.AlignMode.Center,
                    ToggleMode = true,
                    MinWidth = 65,
                    Group = CookTimeButtonGroup
                };

                if(i == 20)
                {
                    newButton.StyleClasses.Add("OpenRight");
                }else{
                    newButton.StyleClasses.Add("OpenBoth");
                }
                CookTimeButtonVbox.AddChild(newButton);
                newButton.OnToggled += args =>
                {
                    OnCookTimeSelected?.Invoke(args, newButton.GetPositionInParent());
                };
            }

           //instButton.SetPositionInParent(6);

            instButton.OnToggled += args =>
            {
               OnCookTimeSelected?.Invoke(args, instButton.GetPositionInParent());
            };

        }

        public void ToggleBusyDisableOverlayPanel(bool shouldDisable)
        {
            DisableCookingPanelOverlay.Visible = shouldDisable;
        }
    }
}
